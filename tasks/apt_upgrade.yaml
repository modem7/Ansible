---
    - name: Wait for systems to become reachable
      wait_for_connection:
        timeout: 120

    - name: Wait for cloud-init / user-data to finish
      command: cloud-init status --wait
      when: "'lxc' not in group_names"
      changed_when: false
      no_log: true

    - name: Wait for cloud init to finish
      community.general.cloud_init_data_facts:
        filter: status
      register: res
      until: "res.cloud_init_data_facts.status.v1.stage is defined and not res.cloud_init_data_facts.status.v1.stage"
      when: "'lxc' not in group_names"
      retries: 50
      delay: 5
    
    - name: Wait for unattended upgrade to finish
      raw: systemd-run --property="After=apt-daily.service apt-daily-upgrade.service" --wait /bin/true

    - name: Remove apt lock file
      file:
        state: absent
        path: "/var/lib/dpkg/lock-frontend"

    - name: Update aptitude repo and cache on all Debian/Ubuntu boxes
      apt:
        update_cache: yes
        cache_valid_time: 3600
        lock_timeout: 300
      retries: 5
      delay: 5

    - name: Collect packages to upgrade
      shell: aptitude -q -F%p --disable-columns search ~U
      register: updates
      changed_when: False
      no_log: true
      failed_when: updates.rc not in [0, 1]
      retries: 3
      until: updates is success

    - name: List packages to upgrade
      debug: msg="{{ updates.stdout_lines | count }} packages to upgrade ({{ updates.stdout_lines | join(', ') }})"
      when: updates.stdout_lines

    - name: Skip rest of tasks if there are no updates
      when: updates.stdout_lines
      block: 
        - name: Upgrade all packages on servers
          apt:
            upgrade: yes
            lock_timeout: 300
          register: apt_result
          no_log: true
          retries: 30
          delay: 10
          until: apt_result is success

        - name: Check and report if updates got installed
          shell: grep -A 30 "$(date +"%a, %b %Oe %Y")" /var/log/aptitude
          changed_when: False
          register: grepaptitude
          no_log: true

        - name: List upgraded packages
          debug: msg="{{ grepaptitude.stdout_lines }}"
          when: grepaptitude.stdout.find('Will install 0 packages, and remove 0 packages.') == -1

        - name: Check if a reboot is needed on all servers
          register: reboot_required_file
          stat: 
            path: /var/run/reboot-required
            get_checksum: false

        - name: Reboot the box if kernel updated
          reboot:
            msg: "Reboot initiated by Ansible for kernel updates"
            connect_timeout: 5
            reboot_timeout: 300
            pre_reboot_delay: 0
            post_reboot_delay: 30
            test_command: uptime
          when: reboot_required_file.stat.exists == true

        - name: Autoremove unused packages
          apt:
            autoremove: yes
          register: apt_remove_result
          changed_when: apt_remove_result.stdout.find('0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.') == -1
          no_log: true

        - name: Load removed package names
          set_fact:
            pkg_removed: "{{ apt_remove_result.stdout_lines|
                             select('regex', '^Removing (.*)$')|
                             map('regex_replace', '^(.*?) (.*?) (.*)$', '\\2')|
                             list }}"
        - name: Were any packages removed
          debug:
            var: pkg_removed
          when: apt_remove_result.stdout.find('0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.') == -1
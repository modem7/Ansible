---
# ansible-vault encrypt_string --vault-password-file password/password_file 'mypasswordhere' --name 'prox_pass'
- name: Set Variables
  gather_facts: false
  hosts: proxmox
  tags: vars
  tasks:
    - name: Set prox_user variable
      set_fact:
        prox_user: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          66396661383233336438313165333464393536383365663837313163373165613233373533636563
          3036373636636334636238616436346234666536656239630a356137383066313565633437343363
          35663337623264636634656236346234376665613932363564376535613137333432376563656264
          6635613535393765320a313830613761623433396233346536653439316430373432376265663338
          3530

    - name: Set prox_pass variable
      set_fact:
        prox_pass: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          66373836313761363138386635346662343237656162653932616339353932623431316131333364
          3534653532346138646163393231333866656131613132610a323137326234393239303465336638
          63323736363833313962383632623961316534646436303838646566303962343938373337626165
          3836356566663030620a383164373733613636313638343037633664303435363934373430343637
          33373137386535623134313033393230663562336430623062663936386633656263383966346665
          6430656661646163353535353339373739396366626432643433

######
#VM's#
######

#Boot up machines
- name: Start VMs
  gather_facts: false
  hosts: proxmox
  tags: startvm
  tasks:
    - name: Proxmox start VMs
      community.general.proxmox_kvm:
        api_user: "{{ prox_user }}"
        api_password: "{{ prox_pass }}"
        api_host: "127.0.0.1"
        node: "proxmox"
        vmid: "{{ item }}"
        state: "started"
      loop:
        - 1101
        - 1103
        - 1104
        - 1105
        - 1106
        - 1254
        - 2206
        - 9000
        - 9001
        - 9002

#Update Packages
- name: Update VMs
  become: true
  become_user: root
  gather_facts: false
  hosts: VMnotele
  tags: updateteleport
  serial: 10
  tasks:
    - name: Wait for systems to become reachable
      wait_for_connection:
        timeout: 120

    - name: Wait for cloud-init / user-data to finish
      command: cloud-init status --wait
      changed_when: false
      no_log: true

    - name: Update aptitude repo and cache on all Debian/Ubuntu boxes
      apt:
        update_cache: yes
        cache_valid_time: 3600
        autoclean: yes

    - name: Get packages that need upgrading
      no_log: true
      shell: apt-get -s --no-download dist-upgrade -V | grep '=>' | awk '{print$1}'
      #shell: apt-get -V --no-download -s dist-upgrade | grep "^  .*" | cut -d"(" -f1
      register: updates
    - name: Show packages that need upgrading
      debug: msg={{ updates.stdout.split('\n')[:-1] }}
      when: updates.stdout | length > 0

    - name: Upgrade all packages on servers
      apt:
        upgrade: yes
        lock_timeout: 120
      register: apt_result
      no_log: true

    - name: Check and report if updates got installed
      debug: msg="{{ apt_result.stdout_lines }}"
      when: apt_result.stdout.find('0 packages upgraded, 0 newly installed, 0 to remove and 0 not upgraded.') == -1

    - name: Check if a reboot is needed on all servers
      register: reboot_required_file
      stat: path=/var/run/reboot-required get_md5=no

    - name: Reboot the box if kernel updated
      reboot:
        msg: "Reboot initiated by Ansible for kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists

    - name: Autoremove unused packages
      apt:
        autoremove: yes
      register: apt_remove_result
      changed_when: apt_remove_result.stdout.find('0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.') == -1
      no_log: true

    - name: Load removed package names
      set_fact:
        pkg_removed: "{{ apt_remove_result.stdout_lines|
                         select('regex', '^Removing (.*)$')|
                         map('regex_replace', '^(.*?) (.*?) (.*)$', '\\2')|
                         list }}"
    - name: Were any packages removed
      debug:
        var: pkg_removed
      when: apt_remove_result.stdout.find('0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.') == -1

#Shutdown machines
- name: Stop VMs
  gather_facts: false
  hosts: proxmox
  tags: stopvm
  tasks:
    - name: Proxmox stop VMs
      community.general.proxmox_kvm:
        api_user: "vmstartstop@pve"
        api_password: "{{ prox_pass }}"
        api_host: "127.0.0.1"
        node: "proxmox"
        vmid: "{{ item }}"
        state: "stopped"
      loop:
        - 1101
        - 1106
        - 1254
        - 2206
        - 9000
        - 9001
        - 9002

##########
#Teleport#
##########

#Start machines up
- name: Start Teleport
  gather_facts: false
  hosts: proxmox
  tags: startteleport
  tasks:
    - name: Proxmox start Teleport
      community.general.proxmox_kvm:
        api_user: "vmstartstop@pve"
        api_password: "{{ prox_pass }}"
        api_host: "127.0.0.1"
        node: "proxmox"
        vmid: "{{ item }}"
        state: "started"
      loop:
        - 1107
        - 1108
        - 1109
        - 1110
        - 1111
        - 1112
        - 1113

#Update Packages
- name: Update Teleport
  become: true
  become_user: root
  gather_facts: false
  hosts: teleport
  tags: updateteleport
  serial: 10
  tasks:
    - name: Wait for systems to become reachable
      wait_for_connection:
        timeout: 120

    - name: Wait for cloud-init / user-data to finish
      command: cloud-init status --wait
      changed_when: false
      no_log: true

    - name: Update aptitude repo and cache on all Debian/Ubuntu boxes
      apt:
        update_cache: yes
        cache_valid_time: 3600
        autoclean: yes

    - name: Get packages that need upgrading
      no_log: true
      shell: apt-get -s --no-download dist-upgrade -V | grep '=>' | awk '{print$1}'
      #shell: apt-get -V --no-download -s dist-upgrade | grep "^  .*" | cut -d"(" -f1
      register: updates
    - name: Show packages that need upgrading
      debug: msg={{ updates.stdout.split('\n')[:-1] }}
      when: updates.stdout | length > 0

    - name: Upgrade all packages on servers
      apt:
        upgrade: yes
        lock_timeout: 120
      register: apt_result
      no_log: true

    - name: Check and report if updates got installed
      debug: msg="{{ apt_result.stdout_lines }}"
      when: apt_result.stdout.find('0 packages upgraded, 0 newly installed, 0 to remove and 0 not upgraded.') == -1

    - name: Check if a reboot is needed on all servers
      register: reboot_required_file
      stat: path=/var/run/reboot-required get_md5=no

    - name: Reboot the box if kernel updated
      reboot:
        msg: "Reboot initiated by Ansible for kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists

    - name: Autoremove unused packages
      apt:
        autoremove: yes
      register: apt_remove_result
      changed_when: apt_remove_result.stdout.find('0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.') == -1
      no_log: true

    - name: Load removed package names
      set_fact:
        pkg_removed: "{{ apt_remove_result.stdout_lines|
                         select('regex', '^Removing (.*)$')|
                         map('regex_replace', '^(.*?) (.*?) (.*)$', '\\2')|
                         list }}"
    - name: Were any packages removed
      debug:
        var: pkg_removed
      when: apt_remove_result.stdout.find('0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.') == -1

#Shutdown machines
- name: Stop Teleport
  gather_facts: false
  hosts: proxmox
  tags: stopteleport
  tasks:
    - name: Proxmox stop Teleport
      community.general.proxmox_kvm:
        api_user: "{{ prox_user }}"
        api_password: "{{ prox_pass }}"
        api_host: "127.0.0.1"
        node: "proxmox"
        vmid: "{{ item }}"
        state: "stopped"
      loop:
        - 1107
        - 1108
        - 1109
        - 1110
        - 1111
        - 1112
        - 1113

#- name: Shutdown Teleport
#  gather_facts: false
#  hosts: teleport
#  tags: stopteleport
#  tasks:
#    - name: Shutdown Teleport VM's
#      community.general.shutdown:
#        msg: "Shutdown initiated by Ansible post updates"
#        delay: 0
